nameOverride: "quick-start"
fullnameOverride: "quick-start"

# ServiceAccount configuration for the secret creation job
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Install CloudNative-PG operator. Set to false if already installed
pg-operator:
  enabled: true

pg-cluster-pharia:
  enabled: true
  nameOverride: pg-cluster-pharia
  type: postgresql
  version:
    # -- PostgreSQL major version to use
    postgresql: "17"
  cluster:
    # -- Number of instances
    instances: 3
    # -- Name of the container image, supporting both tags (<image>:<tag>) and digests for deterministic and repeatable deployments:
    # <image>:<tag>@sha256:<digestValue>
    imageName: ""  # Default value depends on type (postgresql/postgis/timescaledb)
    storage:
      size: 8Gi
      storageClass: ""
    postgresql:
      parameters:
        max_connections: "200"
        shared_buffers: "1950MB"
        effective_cache_size: "5460MB"
        checkpoint_completion_target: "0.9"
        wal_buffers: "16MB"
        default_statistics_target: "100"
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    roles:
      - name: "document_index"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (document_index)
        password:
          secretName: "document-index-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_os"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (pharia_os)
        password:
          secretName: "pharia-os-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "inference_api"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (inference_api)
        password:
          secretName: "inference-api-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_studio"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (pharia_studio)
        password:
          secretName: "pharia-studio-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_oauth_gateway"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (pharia_oauth_gateway)
        password:
          secretName: "pharia-oauth-gateway-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_assistant"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (pharia_assistant)
        password:
          secretName: "pharia-assistant-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_chat"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (pharia_chat)
        password:
          secretName: "pharia-chat-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_catch"
        # `password` and `username` key should exist in secret. username key should be the same as the name of the user (pharia_catch)
        password:
          secretName: "pharia-catch-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "zitadel"
        # `password` and `username` key should exist in secret. username key should be the name of the user (zitadel)
        password:
          secretName: "zitadel-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "openfga"
        # `password` and `username` key should exist in secret. username key should be the name of the user (openfga)
        password:
          secretName: "openfga-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "dex"
        # `password` and `username` key should exist in secret. username key should be the name of the user (dex)
        password:
          secretName: "dex-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_conductor"
        # `password` and `username` key should exist in secret. username key should be the name of the user (pharia_conductor)
        password:
          secretName: "pharia-conductor-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_numinous"
        # `password` and `username` key should exist in secret. username key should be the name of the user (pharia_numinous)
        password:
          secretName: "pharia-numinous-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_transcribe_app"
        # `password` and `username` key should exist in secret. username key should be the name of the user (pharia_transcribe_app)
        password:
          secretName: "pharia-transcribe-app-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "pharia_data"
        # `password` and `username` key should exist in secret. username key should be the name of the user (pharia_data)
        password:
          secretName: "pharia-data-pg-secret-qs"
        login: true
        superuser: true
        replication: false
  backups:
    # -- You need to configure backups manually, so backups are disabled by default.
    enabled: false
  # -- List of PgBouncer poolers
  poolers: []
#    - name: pharia-rw
#      # -- PgBouncer type of service to forward traffic to.
#      type: rw
#      # -- PgBouncer pooling mode
#      poolMode: transaction
#      # -- Number of PgBouncer instances
#      instances: 3
#      # -- PgBouncer configuration parameters
#      parameters:
#        max_client_conn: "1000"
#        default_pool_size: "25"
#      monitoring:
#        # -- Whether to enable monitoring
#        enabled: false
#        podMonitor:
#          # -- Whether to enable the PodMonitor
#          enabled: true
#      # -- Custom PgBouncer deployment template.
#      # Use to override image, specify resources, etc.
#      template: {}

pg-cluster-temporal:
  enabled: true
  nameOverride: pg-cluster-temporal
  type: postgresql
  version:
    # -- PostgreSQL major version to use
    postgresql: "17"
  cluster:
    # -- Number of instances
    instances: 3
    # -- Name of the container image, supporting both tags (<image>:<tag>) and digests for deterministic and repeatable deployments:
    # <image>:<tag>@sha256:<digestValue>
    imageName: ""  # Default value depends on type (postgresql/postgis/timescaledb)
    storage:
      size: 8Gi
      storageClass: ""
    postgresql:
      parameters:
        max_connections: "100"
        shared_buffers: "1950MB"
        effective_cache_size: "5460MB"
        checkpoint_completion_target: "0.9"
        wal_buffers: "16MB"
        default_statistics_target: "100"
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    roles:
      - name: "temporal"
        # password and username key should exist in secret. username key should be the same as the name of the user
        password:
          secretName: "temporal-pg-secret-qs"
        login: true
        superuser: true
        replication: false
      - name: "temporal-visibility"
        # password and username key should exist in secret. username key should be the same as the name of the user
        password:
          secretName: "temporal-visibility-pg-secret-qs"
        login: true
        superuser: true
        replication: false
  backups:
    # -- You need to configure backups manually, so backups are disabled by default.
    enabled: false
  # -- List of PgBouncer poolers
  poolers: []
#    - name: pharia-rw
#      # -- PgBouncer type of service to forward traffic to.
#      type: rw
#      # -- PgBouncer pooling mode
#      poolMode: transaction
#      # -- Number of PgBouncer instances
#      instances: 3
#      # -- PgBouncer configuration parameters
#      parameters:
#        max_client_conn: "1000"
#        default_pool_size: "25"
#      monitoring:
#        # -- Whether to enable monitoring
#        enabled: false
#        podMonitor:
#          # -- Whether to enable the PodMonitor
#          enabled: true
#      # -- Custom PgBouncer deployment template.
#      # Use to override image, specify resources, etc.
#      template: {}

postgresql:
  databases:
    - name: "document-index"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "document_index"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-os"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_os"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "inference-api"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "inference_api"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-studio"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_studio"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-oauth-gateway"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_oauth_gateway"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-assistant"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_assistant"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-chat"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_chat"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-catch"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_catch"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "zitadel"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "zitadel"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "openfga"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "openfga"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "dex"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "dex"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-conductor"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_conductor"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-numinous"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_numinous"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-transcribe-app"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_transcribe_app"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "pharia-data"
      enabled: true
      cluster: "pg-cluster-pharia"
      owner: "pharia_data"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "temporal"
      enabled: true
      cluster: "pg-cluster-temporal"
      owner: "temporal"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50
    - name: "temporal-visibility"
      enabled: true
      cluster: "pg-cluster-temporal"
      owner: "temporal-visibility"
      extensions:
        - "uuid-ossp"
        - "pgcrypto"
        - "pg_stat_statements"
        - "pg_trgm"
        - "btree_gin"
      connectionLimit: 50