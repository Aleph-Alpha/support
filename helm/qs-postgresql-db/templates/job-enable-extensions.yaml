{{- if .Values.databases }}
{{- $clusters := dict }}
{{- range .Values.databases }}
{{- if and .enabled .extensions }}
{{- if not (hasKey $clusters .cluster) }}
{{- $_ := set $clusters .cluster (list) }}
{{- end }}
{{- $dbInfo := dict "name" .name "extensions" .extensions }}
{{- $_ := set $clusters .cluster (append (get $clusters .cluster) $dbInfo) }}
{{- end }}
{{- end }}
{{- range $clusterName, $databases := $clusters }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "qs-postgresql-db.fullname" $ }}-enable-extensions-{{ $clusterName | sha256sum | trunc 8 }}
  labels:
    {{- include "qs-postgresql-db.labels" $ | nindent 4 }}
    app.kubernetes.io/component: extension-enabler
    cluster: {{ $clusterName }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 5
  template:
    metadata:
      labels:
        {{- include "qs-postgresql-db.selectorLabels" $ | nindent 8 }}
        app.kubernetes.io/component: extension-enabler
    spec:
      restartPolicy: OnFailure
      containers:
        - name: enable-extensions
          image: {{ $.Values.extensionJob.image | default "postgres:17" }}
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: "{{ $clusterName }}-rw"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ $clusterName }}-superuser"
                  key: password
            - name: PGSSLMODE
              value: {{ $.Values.extensionJob.sslMode | default "prefer" | quote }}
          command:
            - /bin/bash
            - -c
            - |
              set -e
              
              echo "Waiting for PostgreSQL cluster to be ready..."
              MAX_RETRIES=30
              RETRY=0
              until pg_isready -h $PGHOST -U $PGUSER || [ $RETRY -eq $MAX_RETRIES ]; do
                echo "PostgreSQL is not ready yet. Waiting... (attempt $((RETRY+1))/$MAX_RETRIES)"
                sleep 10
                RETRY=$((RETRY+1))
              done
              
              if [ $RETRY -eq $MAX_RETRIES ]; then
                echo "ERROR: PostgreSQL cluster did not become ready in time"
                exit 1
              fi
              
              echo "PostgreSQL is ready!"
              echo ""
              
              # Process each database
              {{- range $databases }}
              echo "========================================" 
              echo "Processing database: {{ .name }}"
              echo "========================================"
              export PGDATABASE="{{ .name }}"
              
              # Check if database exists
              if psql -lqt | cut -d \| -f 1 | grep -qw "{{ .name }}"; then
                echo "Database exists, enabling extensions..."
                {{- range .extensions }}
                echo "  - Enabling extension: {{ . }}"
                if psql -c "CREATE EXTENSION IF NOT EXISTS \"{{ . }}\";" 2>&1 | tee /tmp/ext_output; then
                  echo "    ✓ Success"
                else
                  echo "    ⚠ Warning: Could not create {{ . }}"
                  cat /tmp/ext_output
                fi
                {{- end }}
              else
                echo "⚠ Database {{ .name }} does not exist yet, skipping..."
              fi
              echo ""
              {{- end }}
              
              echo "========================================"
              echo "Extension enablement complete!"
              echo "========================================"
{{- end }}
{{- end }}

