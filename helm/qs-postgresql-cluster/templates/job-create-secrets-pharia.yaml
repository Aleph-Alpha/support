apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "qs-postgresql-cluster.fullname" . }}-create-secrets-pharia
  labels:
    {{- include "qs-postgresql-cluster.labels" . | nindent 4 }}
    app.kubernetes.io/component: create-secrets-pharia
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "qs-postgresql-cluster.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: create-secrets-pharia
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "qs-postgresql-cluster.serviceAccountName" . }}
      containers:
        - name: create-secrets
          image: bitnamilegacy/kubectl:latest
          command: ["/bin/bash"]
          args:
            - -c
            - |
              #!/bin/bash
              set -e

              # Colors for output
              RED='\033[0;31m'
              GREEN='\033[0;32m'
              YELLOW='\033[1;33m'
              BLUE='\033[0;34m'
              NC='\033[0m' # No Color

              # Function to print colored output
              print_status() {
                  echo -e "${BLUE}[INFO]${NC} $1"
              }

              print_success() {
                  echo -e "${GREEN}[SUCCESS]${NC} $1"
              }

              print_warning() {
                  echo -e "${YELLOW}[WARNING]${NC} $1"
              }

              print_error() {
                  echo -e "${RED}[ERROR]${NC} $1"
              }

              # Function to generate random password
              generate_password() {
                  openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
              }

              # Function to create PostgreSQL secrets
              create_postgresql_secrets() {
                  print_status "Creating PostgreSQL secrets..."

                  # List of PostgreSQL users based on enabled databases
                  local pg_users=()

                  # Check which databases are enabled and add to the list
                {{- range .Values.clusterPharia.cluster.roles }}
                  pg_users+=("{{ .name }}")
                {{- end }}

                  for user in "${pg_users[@]}"; do
                      local secret_name="${user//_/-}-pg-secret-qs"
                      local username="${user}"

                      # Determine host based on user
                      local host="pharia-ai-pg-cluster-rw"
                      if [[ "$user" == "temporal" || "$user" == "temporal_visibility" ]]; then
                          host="temporal-cluster-rw"
                      fi
                      
                      local database="${user//_/-}"
                      local port="5432"
                      local protocol="postgres"
                      
                      # Check if secret already exists
                      if kubectl get secret "$secret_name" &> /dev/null; then
                          # Secret exists - check if content or labels need updating
                          print_status "Secret '$secret_name' exists, checking for changes..."
                          
                          # Get existing values
                          local existing_password=$(kubectl get secret "$secret_name" -o jsonpath='{.data.password}' 2>/dev/null | base64 -d)
                          local existing_host=$(kubectl get secret "$secret_name" -o jsonpath='{.data.host}' 2>/dev/null | base64 -d)
                          local existing_database=$(kubectl get secret "$secret_name" -o jsonpath='{.data.database}' 2>/dev/null | base64 -d)
                          local existing_username=$(kubectl get secret "$secret_name" -o jsonpath='{.data.username}' 2>/dev/null | base64 -d)
                          
                          # Get existing labels
                          local existing_cluster_label=$(kubectl get secret "$secret_name" -o jsonpath='{.metadata.labels.qs-postgresql-cluster/name}' 2>/dev/null)
                          local existing_type_label=$(kubectl get secret "$secret_name" -o jsonpath='{.metadata.labels.qs-postgresql-cluster/type}' 2>/dev/null)
                          
                          # Check if fields have changed
                          local needs_update=false
                          if [[ "$existing_host" != "$host" ]]; then
                              print_warning "Host changed from '$existing_host' to '$host'"
                              needs_update=true
                          fi
                          if [[ "$existing_database" != "$database" ]]; then
                              print_warning "Database changed from '$existing_database' to '$database'"
                              needs_update=true
                          fi
                          if [[ "$existing_username" != "$username" ]]; then
                              print_warning "Username changed from '$existing_username' to '$username'"
                              needs_update=true
                          fi
                          
                          # Check if labels have changed
                          if [[ "$existing_cluster_label" != "cluster-pharia" ]]; then
                              print_warning "Cluster label changed from '$existing_cluster_label' to 'cluster-pharia'"
                              needs_update=true
                          fi
                          if [[ "$existing_type_label" != "pg-secret-qs" ]]; then
                              print_warning "Type label changed from '$existing_type_label' to 'pg-secret-qs'"
                              needs_update=true
                          fi
                          
                          if [[ "$needs_update" == "true" ]]; then
                              # Content or labels changed - preserve password but update other fields
                              local password="$existing_password"
                              print_status "Updating secret with preserved password"
                          else
                              # No changes needed
                              print_success "Secret '$secret_name' is up to date, skipping"
                              continue
                          fi
                      else
                          # Secret doesn't exist - generate new password
                          print_status "Creating new secret: $secret_name"
                          local password=$(generate_password)
                          print_status "Generated new password for $username"
                      fi

                      # Create PostgreSQL connection URI
                      local uri="postgres://${username}:${password}@${host}:${port}/${database}"

                      # Create or update the secret with proper labels
                      kubectl create secret generic "$secret_name" \
                          --from-literal=username="$username" \
                          --from-literal=user="$username" \
                          --from-literal=password="$password" \
                          --from-literal=host="$host" \
                          --from-literal=port="$port" \
                          --from-literal=protocol="$protocol" \
                          --from-literal=uri="$uri" \
                          --from-literal=database="$database" \
                          --dry-run=client -o yaml | \
                          kubectl label --local -f - \
                          app.kubernetes.io/name="{{ include "qs-postgresql-cluster.name" . }}" \
                          qs-postgresql-cluster/name="cluster-pharia" \
                          qs-postgresql-cluster/type="pg-secret-qs" \
                          -o yaml | kubectl apply -f -

                      if kubectl get secret "$secret_name" &> /dev/null; then
                          print_success "Secret '$secret_name' ready (username: $username, host: $host, port: $port, database: $database)"
                      else
                          print_error "Failed to create/update secret '$secret_name'"
                      fi
                  done
              }

              # Main execution
              main() {
                  print_status "Starting secret creation for pharia-ai-helm-chart..."
                  echo ""

                  # Check if kubectl is available
                  if ! command -v kubectl &> /dev/null; then
                      print_error "kubectl is not installed or not in PATH"
                      exit 1
                  fi

                  # Check if openssl is available for password generation
                  if ! command -v openssl &> /dev/null; then
                      print_error "openssl is not installed or not in PATH (needed for password generation)"
                      exit 1
                  fi

                  # Create all secrets
                  create_postgresql_secrets
                  echo ""

                  print_success "All secrets for enabled services have been created successfully!"
              }

              # Run main function
              main "$@"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001