apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "qs-postgresql-cluster.fullname" . }}-create-secrets-pharia
  labels:
    {{- include "qs-postgresql-cluster.labels" . | nindent 4 }}
    app.kubernetes.io/component: create-secrets-pharia
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "qs-postgresql-cluster.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: create-secrets-pharia
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "qs-postgresql-cluster.serviceAccountName" . }}
      containers:
        - name: create-secrets
          image: bitnamilegacy/kubectl:latest
          command: ["/bin/bash"]
          args:
            - -c
            - |
              #!/bin/bash
              set -e

              # Colors for output
              RED='\033[0;31m'
              GREEN='\033[0;32m'
              YELLOW='\033[1;33m'
              BLUE='\033[0;34m'
              NC='\033[0m' # No Color

              # Function to print colored output
              print_status() {
                  echo -e "${BLUE}[INFO]${NC} $1"
              }

              print_success() {
                  echo -e "${GREEN}[SUCCESS]${NC} $1"
              }

              print_warning() {
                  echo -e "${YELLOW}[WARNING]${NC} $1"
              }

              print_error() {
                  echo -e "${RED}[ERROR]${NC} $1"
              }

              # Function to generate random password
              generate_password() {
                  openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
              }

              # Function to create PostgreSQL secrets
              create_postgresql_secrets() {
                  print_status "Creating PostgreSQL secrets..."

                  # List of PostgreSQL users based on enabled databases
                  local pg_users=()

                  # Check which databases are enabled and add to the list
                {{- range .Values.clusterPharia.cluster.roles }}
                  pg_users+=("{{ .name }}")
                {{- end }}

                  for user in "${pg_users[@]}"; do
                      local secret_name="${user//_/-}-pg-secret-qs"
                      local username="${user}"

                      print_status "Creating secret: $secret_name"

                      # Generate password
                      local password=$(generate_password)

                      # Determine host based on user
                      local host="pharia-ai-pg-cluster-rw"
                      if [[ "$user" == "temporal" || "$user" == "temporal_visibility" ]]; then
                          host="temporal-cluster-rw"
                      fi

                      # Create PostgreSQL connection URI
                      local uri="postgres://${username}:${password}@${host}:5432/${user//_/-}"

                      # Create the secret with proper labels
                      kubectl create secret generic "$secret_name" \
                          --from-literal=username="$username" \
                          --from-literal=user="$username" \
                          --from-literal=password="$password" \
                          --from-literal=host="$host" \
                          --from-literal=port="5432" \
                          --from-literal=protocol="postgres" \
                          --from-literal=uri="$uri" \
                          --from-literal=database="${user//_/-}" \
                          --dry-run=client -o yaml | \
                          kubectl label --local -f - \
                          app.kubernetes.io/name="{{ include "qs-postgresql-cluster.name" . }}" \
                          -o yaml | kubectl apply -f -

                      print_success "Created secret: $secret_name with username/user: $username, host: $host, port: 5432, protocol: postgres"
                  done
              }

              # Main execution
              main() {
                  print_status "Starting secret creation for pharia-ai-helm-chart..."
                  echo ""

                  # Check if kubectl is available
                  if ! command -v kubectl &> /dev/null; then
                      print_error "kubectl is not installed or not in PATH"
                      exit 1
                  fi

                  # Check if openssl is available for password generation
                  if ! command -v openssl &> /dev/null; then
                      print_error "openssl is not installed or not in PATH (needed for password generation)"
                      exit 1
                  fi

                  # Create all secrets
                  create_postgresql_secrets
                  echo ""

                  print_success "All secrets for enabled services have been created successfully!"
              }

              # Run main function
              main "$@"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001