# ============================================================================
# PgBouncer Helm Chart Configuration
# ============================================================================
#
# This Helm chart deploys PgBouncer as a connection pooler for PostgreSQL.
# It is optimized for use with CloudNativePG clusters.
#
# For more details, see:
# - https://www.pgbouncer.org/config.html
# - https://github.com/cloudnative-pg/pgbouncer-containers
# - https://www.pgbouncer.org/usage.html

# ============================================================================
# Basic Configuration
# ============================================================================

# Name override for Kubernetes resources
nameOverride: "pgbouncer"

# Number of PgBouncer replicas to run
replicaCount: 1

# ============================================================================
# Container Image Configuration
# ============================================================================
# CloudNativePG PgBouncer container image
# ref: https://github.com/cloudnative-pg/pgbouncer-containers/pkgs/container/pgbouncer
image:
  repository: ghcr.io/cloudnative-pg/pgbouncer
  tag: 1.24.0-14
  pullPolicy: IfNotPresent

# Secrets for pulling images from private registries
imagePullSecrets: []

# ============================================================================
# High Availability Configuration
# ============================================================================

# Pod anti-affinity setting (soft or hard)
antiAffinity: hard

# PodDisruptionBudget maximum unavailable pods
maxUnavailable: 1

# ============================================================================
# Kubernetes Scheduling Configuration
# ============================================================================
# Node affinity configuration
# ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeAffinity: {}

# Tolerations for node taints
# ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# Node selector for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

# Pod affinity/anti-affinity configuration
affinity:
  podAntiAffinity:
    topologyKey: kubernetes.io/hostname

# ============================================================================
# Deployment Configuration
# ============================================================================

deployment:
  # Port PgBouncer container listens on
  containerPort: 6432

  # Graceful shutdown timeout
  terminationGracePeriodSeconds: 120

  # Readiness probe configuration
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  # Liveness probe configuration
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  # Deployment update strategy
  # ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1

# ============================================================================
# Service Configuration
# ============================================================================

service:
  type: ClusterIP
  ports:
  - name: pgbouncer
    port: 5432
    targetPort: 6432
    protocol: TCP
  - name: metrics
    port: 9127
    targetPort: 9127
    protocol: TCP

# ============================================================================
# Pod Metadata Configuration
# ============================================================================

# Custom labels to add to pods
podLabels: {}
# Example:
#   app: my-application
#   environment: production

# Custom annotations to add to pods
podAnnotations: {}
# Example for Prometheus monitoring:
#   prometheus.io/scrape: "true"
#   prometheus.io/port: "9127"
#   prometheus.io/path: "/metrics"

# ============================================================================
# PgBouncer Database Configuration
# ============================================================================
# Database connection configuration
# ref: https://www.pgbouncer.org/config.html
# ref: https://github.com/pgbouncer/pgbouncer/blob/pgbouncer_1_24_0/etc/pgbouncer.ini
#
# Each database can be configured with the following parameters:
# - dbname: Target database name
# - host: PostgreSQL server hostname
# - port: PostgreSQL server port (default: 5432)
# - user: Username for connecting to the database
# - password: Password for the user
# - auth_user: User for authentication queries
# - pool_size: Maximum number of server connections per user/database pair
# - min_pool_size: Minimum pool size
# - reserve_pool: Additional connections for high load
# - connect_query: Query to execute after connecting
# - pool_mode: Pooling mode (session, transaction, statement)
# - max_db_connections: Maximum connections to this database
# - client_encoding: Character encoding (e.g., UTF8)
# - datestyle: Date format style
# - timezone: Timezone setting (e.g., UTC)

databases: {}
# Example configuration:
#   my-database:
#     dbname: foo
#     host: "postgres.example.com"
#     port: 5432
#     user: app_user
#     password: secret
#     auth_user: pgbouncer
#     pool_size: 20
#     min_pool_size: 0
#     reserve_pool: 0
#     connect_query:
#     pool_mode: transaction
#     max_db_connections: 20
#     client_encoding: UTF8
#     datestyle:
#     timezone: UTC

# User-specific configuration overrides
users: {}
# Example configuration:
#   user1:
#     pool_mode: transaction
#     max_user_connections: 10

# ============================================================================
# PgBouncer Configuration
# ============================================================================
# Main PgBouncer settings
# ref: https://www.pgbouncer.org/config.html
# ref: https://github.com/pgbouncer/pgbouncer/blob/pgbouncer_1_24_0/etc/pgbouncer.ini
#
# Note: Only enabled values represent the minimal required configuration.
# Commented values show available options with their defaults.

pgbouncer:
  # === Administrative Settings ===

  # Log file location (stdout for container logs)
  logfile: /dev/stdout
  # pidfile:

  # === Network Configuration ===

  # IP address to listen on (* = all IPs, 0.0.0.0 = all IPv4)
  listen_addr: 0.0.0.0

  # Port for PgBouncer to listen on
  listen_port: 6432

  # Unix socket directory (empty to disable)
  # On Debian/Ubuntu typically /var/run/postgresql
  unix_socket_dir: ""
  # unix_socket_mode: 0777
  # unix_socket_group:

  # Peer ID for PgBouncer clustering (0 = peering disabled)
  # peer_id: 0

  # === TLS Settings for Client Connections ===
  # Configuration for TLS encryption from clients to PgBouncer

  # Client TLS mode: disable, allow, require, verify-ca, verify-full
  # client_tls_sslmode: disable

  # Path to trusted CA certificates file
  # client_tls_ca_file:

  # Private key and certificate for TLS (required for client TLS)
  # client_tls_key_file:
  # client_tls_cert_file:

  # Cipher suite: fast, normal, secure, legacy, or custom string
  # client_tls_ciphers: fast

  # TLS protocol versions: all, secure, tlsv1.0, tlsv1.1, tlsv1.2, tlsv1.3
  # client_tls_protocols: secure

  # Diffie-Hellman parameters: none, auto, legacy
  # client_tls_dheparams: auto

  # Elliptic curve: none, auto, or curve name
  # client_tls_ecdhcurve: auto

  # === TLS Settings for Backend Connections ===
  # Configuration for TLS encryption from PgBouncer to PostgreSQL

  # Server TLS mode: disable, allow, require, verify-ca, verify-full
  server_tls_sslmode: require

  # Path to trusted CA certificates file
  # server_tls_ca_file:

  # Client certificate for backend (only if backend requires it)
  # server_tls_key_file:
  # server_tls_cert_file:

  # TLS protocol versions: all, secure, tlsv1.0, tlsv1.1, tlsv1.2, tlsv1.3
  # server_tls_protocols: secure

  # Cipher suite: fast, normal, secure, legacy, or custom string
  # server_tls_ciphers: default

  # === Authentication Settings ===
  # User authentication configuration

  # Authentication type: cert, md5, scram-sha-256, plain, trust, any, hba, pam
  auth_type: scram-sha-256

  # Path to authentication file (userlist)
  auth_file: /etc/pgbouncer/userlist.txt

  # Path to HBA-style authentication configuration
  # auth_hba_file:

  # Path to pg_ident-style user mapping file
  # auth_ident_file:

  # Query to fetch passwords from database (must return username and password)
  # auth_query: select uname, password FROM pgbouncer.get_auth($1)

  # Database to run auth_query against
  # auth_dbname:

  # === Administrative Access ===
  # Control access to PgBouncer administrative functions

  # Comma-separated list of users allowed to change settings
  # admin_users: user2, someadmin, otheradmin

  # Comma-separated list of users allowed to use SHOW commands
  # stats_users: stats, root

  # === Pooling Behavior ===
  # Control when server connections are released back to the pool

  # Pool mode (when connections are returned to pool):
  # - session: After client disconnects (default)
  # - transaction: After transaction finishes (recommended)
  # - statement: After each statement finishes
  pool_mode: transaction

  # Maximum prepared statements to cache per connection (0 = disabled)
  # max_prepared_statements: 0

  # Query to clean connection after release (ROLLBACK handled automatically)
  # server_reset_query: DISCARD ALL

  # Whether server_reset_query runs in all modes (false = session mode only)
  # server_reset_query_always: 0

  # Comma-separated PostgreSQL parameters to track per client
  # Parameters are cached and restored when client uses a server connection
  # track_extra_parameters: IntervalStyle

  # Startup parameters to ignore (e.g., extra_float_digits for newer JDBC)
  ignore_startup_parameters: extra_float_digits, jit

  # Query to run when taking idle server connection into use
  # server_check_query: select 1

  # Skip check query if server was used recently (seconds, 0 = always run)
  # server_check_delay: 30

  # Close idle servers immediately in session mode during RECONNECT/RELOAD
  # server_fast_close: 0

  # Add host to application_name on server connection
  # application_name_add_host: 0

  # Stats update period in seconds
  # stats_period: 60

  # === Connection Limits ===
  # Control maximum connections and pool sizes

  # Maximum number of client connections
  max_client_conn: 300

  # Default pool size per user/database pair
  # - Transaction pooling: 20 is a good default
  # - Session pooling: Set to max concurrent clients
  default_pool_size: 20

  # Minimum number of server connections to maintain in pool
  # min_pool_size: 0

  # Additional connections to allow under high load
  # reserve_pool_size: 0

  # Client wait time (seconds) before using reserve pool
  # reserve_pool_timeout: 5

  # Maximum server connections per database (0 = unlimited)
  # max_db_connections: 0

  # Maximum server connections per user (0 = unlimited)
  # max_user_connections: 0

  # Connection reuse strategy (false = LIFO, true = round-robin)
  # server_round_robin: 0

  # === Logging Configuration ===
  # Control what PgBouncer logs

  # Syslog configuration (0 = disabled, 1 = enabled)
  # syslog: 0
  # syslog_ident: pgbouncer
  # syslog_facility: daemon

  # Log client connections and server connections (0 = disabled)
  log_connections: 0

  # Log connection closures with reasons (0 = disabled)
  log_disconnections: 0

  # Log error messages sent to clients (1 = enabled)
  log_pooler_errors: 1

  # Log aggregated statistics (1 = enabled)
  log_stats: 1

  # Logging verbosity level (0 = normal, increase for more detail)
  # verbose: 0

  # === Timeout Configuration ===
  # Connection and query timeout settings (in seconds)

  # Maximum lifetime of a server connection (seconds)
  # server_lifetime: 3600

  # Close idle server connections after this time (helps cleanup after peak load)
  # server_idle_timeout: 600

  # Timeout for establishing server connection (seconds)
  # server_connect_timeout: 15

  # Wait time after failed login before retry (seconds)
  # server_login_retry: 15

  # Query timeout - close server connection if query runs too long
  # WARNING: Use for network issues, not as statement_timeout (0 = disabled)
  # query_timeout: 0

  # Maximum time query can wait for server assignment
  # WARNING: Use to handle database failures gracefully (default: 120)
  # query_wait_timeout: 120

  # Maximum time for cancel request to wait for execution
  # Prevents client lockup when server is down (0 = disabled, default: 10)
  # cancel_wait_timeout: 10

  # Close idle client connections after this time
  # WARNING: Use for network issues (0 = disabled, default: 0)
  # client_idle_timeout: 0

  # Disconnect clients that don't complete login in time (seconds)
  # client_login_timeout: 60

  # Clean auto-created database entries (via "*") after idle time (seconds)
  # autodb_idle_timeout: 3600

  # Close connections idle in transaction longer than this (seconds)
  # idle_transaction_timeout: 0

  # Buffer flush timeout during SUSPEND/-R (seconds)
  # suspend_timeout: 10

  # === Low-Level Network Tuning ===
  # Advanced networking and performance tuning options

  # Buffer size for streaming packets (bytes)
  # pkt_buf: 4096

  # Socket listen backlog (see man 2 listen)
  # listen_backlog: 128

  # Max packet buffers to process per event loop iteration
  # sbuf_loopcnt: 5

  # Maximum PostgreSQL protocol packet size (bytes)
  # max_packet_size: 2147483647

  # Enable SO_REUSEPORT socket option (0 = disabled, 1 = enabled)
  # so_reuseport: 0

  # === TCP Configuration ===
  # Low-level TCP tuning options (see man 7 tcp)

  # TCP_DEFER_ACCEPT: Wait for data before notifying (Linux default: 45, other OS: 0)
  # tcp_defer_accept: 0

  # In-kernel TCP buffer size in bytes (Linux default: 4096)
  # tcp_socket_buffer: 0

  # Enable TCP keepalive (0 = disabled, 1 = enabled)
  # tcp_keepalive: 1

  # === TCP Keepalive Settings (Linux-specific, requires tcp_keepalive: 1) ===

  # Number of keepalive packets to send
  # tcp_keepcnt: 0

  # Idle time before sending keepalive packets (seconds)
  # tcp_keepidle: 0

  # Interval between keepalive probes (seconds)
  # tcp_keepintvl: 0

  # Maximum time for unacknowledged data before closing (milliseconds)
  # tcp_user_timeout: 0

  # === DNS Configuration ===
  # DNS lookup and caching settings

  # DNS lookup cache time (seconds)
  # dns_max_ttl: 15

  # DNS zone SOA lookup period (seconds)
  # dns_zone_check_period: 0

  # DNS negative result (NXDOMAIN) cache time (seconds)
  # dns_nxdomain_ttl: 15

  # Custom resolv.conf file path (empty = use OS settings)
  # resolv_conf: /etc/pgbouncer/resolv.conf

  # === Miscellaneous Settings ===

  # Disable PQexec to prevent multi-statement queries (security feature)
  # disable_pqexec: 0

  # Configuration file for next RELOAD/SIGHUP (default: from command line)
  # conffile:

  # Windows service registration name (job_name is Skytools alias)
  # service_name: pgbouncer
  # job_name: pgbouncer

  # Include additional configuration files
  # include: /etc/pgbouncer.d/extra-pgbouncer.ini

# ============================================================================
# Authentication Userlist Configuration
# ============================================================================
# User authentication list configuration
#
# The userlist contains username and password hash pairs for authentication.
# Format: "username" "password_hash"
#
# To generate userlist from PostgreSQL:
# psql -Atq -U postgres -d postgres -c \
#   "SELECT concat('\"', usename, '\" \"', passwd, '\"') FROM pg_shadow;"
#
# Note: The userlist secret is typically created by a Kubernetes Job

userlist: {}
# Example:
#   secret: pgbouncer-userlist

# ============================================================================
# Init Containers Configuration
# ============================================================================
# Containers that run before the main PgBouncer container starts
# Used for setup tasks like waiting for configuration files

extraInitContainers:
  - name: config-updater
    image: "ghcr.io/cloudnative-pg/pgbouncer:1.24.0-14"
    command:
      - "/bin/sh"
      - "-c"
      - |
        # Copy pgbouncer.ini configuration
        cat /original/pgbouncer/pgbouncer.ini > /etc/pgbouncer/pgbouncer.ini

        # Wait for userlist.txt to be available
        echo "Waiting for /original/pgbouncer/userlist.txt to be available..."
        max_wait=300  # 5 minutes timeout
        wait_time=0

        while [ ! -f /original/pgbouncer/userlist.txt ] && [ $wait_time -lt $max_wait ]; do
          echo "userlist.txt not found, waiting... (${wait_time}s/${max_wait}s)"
          sleep 5
          wait_time=$((wait_time + 5))
        done

        if [ -f /original/pgbouncer/userlist.txt ]; then
          echo "Found userlist.txt, copying to /etc/pgbouncer/userlist.txt"
          cat /original/pgbouncer/userlist.txt > /etc/pgbouncer/userlist.txt
        else
          echo "ERROR: userlist.txt not found after ${max_wait} seconds"
          exit 1
        fi

        echo "Configuration setup completed successfully"
    volumeMounts:
      - name: config
        mountPath: /original/pgbouncer
      - name: config-updated
        mountPath: /etc/pgbouncer

# ============================================================================
# Volume Mounts Configuration
# ============================================================================
# Additional volume mounts for the main PgBouncer container

extraVolumeMounts:
- mountPath: /original/pgbouncer
  name: config
# Additional mount examples:
# - mountPath: /etc/pgbouncer
#   name: config-updated

# ============================================================================
# Volumes Configuration
# ============================================================================
# Additional volumes to attach to the pod

extraVolumes:
- name: config-updated
  emptyDir: {}
# Additional volume examples:
# - name: extra-pgbouncer-ini
#   mountPath: /etc/pgbouncer.d
#   subPath: ""
#   configMap: extra-configmap-ini
#   readOnly: true

# ============================================================================
# Resource Limits Configuration
# ============================================================================
# CPU and memory resource requests and limits
# ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

resources:
  limits:
    cpu: "1"
  requests:
    cpu: "1"
    memory: 20Mi

# ============================================================================
# Security Configuration
# ============================================================================
# Pod and container security settings

# Pod security context
security:
  # User ID for PgBouncer (998 is default)
  runAsUser: 998
  # Group ID for filesystem access
  fsGroup: 996

# Container security context
containerSecurityContext:
  runAsUser: 998
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  capabilities:
    drop: ["ALL"]

# ============================================================================
# Monitoring Configuration
# ============================================================================
# PgBouncer metrics exporter for Prometheus monitoring
#
# When enabling the exporter, remember to configure podAnnotations for Prometheus:
# podAnnotations:
#   prometheus.io/scrape: "true"
#   prometheus.io/port: "9127"
#   prometheus.io/path: "/metrics"

pgbouncerExporter: []
# Example exporter configuration:
#   - name: metrics-exporter
#     image: quay.io/prometheuscommunity/pgbouncer-exporter:v0.11.0
#     ports:
#       - name: metrics
#         containerPort: 9127
#     args:
#       - --web.listen-address=:9127
#       - --web.telemetry-path=/metrics
#       - --log.level=error
#       - --pgBouncer.connectionString=postgres://$(PGBOUNCER_USER):$(PGBOUNCER_PWD)@localhost:6432/pgbouncer?sslmode=disable&connect_timeout=10
#     env:
#       - name: PGBOUNCER_USER
#         valueFrom:
#           secretKeyRef:
#             name: "pgbouncer-cred"
#             key: user
#       - name: PGBOUNCER_PWD
#         valueFrom:
#           secretKeyRef:
#             name: "pgbouncer-cred"
#             key: password
#     livenessProbe:
#       initialDelaySeconds: 3
#       timeoutSeconds: 3
#       httpGet:
#         path: /
#         port: metrics
#     readinessProbe:
#       initialDelaySeconds: 5
#       timeoutSeconds: 10
#       httpGet:
#         path: /
#         port: metrics
#     securityContext:
#       runAsUser: 1001
#       runAsGroup: 1001
#       runAsNonRoot: true
#       seccompProfile:
#         type: RuntimeDefault

# ServiceMonitor for Prometheus Operator integration
serviceMonitor:
  # Enable ServiceMonitor resource creation
  enabled: false

  # Scrape interval for metrics collection
  interval: 30s

  # Timeout for each scrape request
  scrapeTimeout: 10s

  # Metrics endpoint path
  path: /metrics

  # Additional labels for ServiceMonitor
  labels: {}

  # Additional annotations for ServiceMonitor
  annotations: {}

  # Honor labels from scraped data
  honorLabels: false

  # Metric relabeling configuration
  metricRelabelings: []

  # Target relabeling configuration
  relabelings: []
