# Default values for qs-pgbouncer.
nameOverride: ""

pgbouncerPharia:
  enabled: true
  nameOverride: pgbouncer-pharia
  replicaCount: 3
  antiAffinity: soft
  databases:
    "*":
      host: "qs-postgresql-cluster-cluster-pharia-rw" # pharia postgresql endpoint
      port: 5432
  userlist:
    secret: pgbouncer-pharia-userlist
  resources:
    limits:
      cpu: "4"
      memory: 2000Mi
    requests:
      cpu: "1"
      memory: 512Mi

  pgbouncerExporter:
    - name: metrics-exporter
      image: quay.io/prometheuscommunity/pgbouncer-exporter:v0.11.0
      ports:
        - name: metrics
          containerPort: 9127
      args:
        - --web.listen-address=:9127
        - --web.telemetry-path=/metrics
        - --log.level=error
        - --pgBouncer.connectionString=postgres://$(PGBOUNCER_USER):$(PGBOUNCER_PWD)@localhost:6432/pgbouncer?sslmode=disable&connect_timeout=10
      env:
        - name: PGBOUNCER_USER
          valueFrom:
            secretKeyRef:
              name: "pgbouncer-pharia-pg-secret-qs" # Name of the secret containing PgBouncer credentials
              key:  user
        - name: PGBOUNCER_PWD
          valueFrom:
            secretKeyRef:
              name: "pgbouncer-pharia-pg-secret-qs" # Name of the secret containing PgBouncer credentials
              key:  password
      livenessProbe:
        initialDelaySeconds: 3
        timeoutSeconds: 3
        httpGet:
          path: /
          port: metrics
      readinessProbe:
        initialDelaySeconds: 5
        timeoutSeconds: 10
        httpGet:
          path: /
          port: metrics
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    labels: {}
    annotations: {}
    honorLabels: false
    metricRelabelings: []
    relabelings: []

pgbouncerTemporal:
  enabled: true
  nameOverride: pgbouncer-temporal
  replicaCount: 3
  antiAffinity: soft
  databases:
    "*":
      host: "qs-postgresql-cluster-cluster-temporal-rw" # temporal postgresql endpoint
      port: 5432
  userlist:
    secret: pgbouncer-temporal-userlist
  resources:
    limits:
      cpu: "4"
      memory: 2000Mi
    requests:
      cpu: "1"
      memory: 512Mi

  pgbouncerExporter:
    - name: metrics-exporter
      image: quay.io/prometheuscommunity/pgbouncer-exporter:v0.11.0
      ports:
        - name: metrics
          containerPort: 9127
      args:
        - --web.listen-address=:9127
        - --web.telemetry-path=/metrics
        - --log.level=error
        - --pgBouncer.connectionString=postgres://$(PGBOUNCER_USER):$(PGBOUNCER_PWD)@localhost:6432/pgbouncer?sslmode=disable&connect_timeout=10
      env:
        - name: PGBOUNCER_USER
          valueFrom:
            secretKeyRef:
              name: "pgbouncer-temporal-pg-secret-qs" # Name of the secret containing PgBouncer credentials
              key:  user
        - name: PGBOUNCER_PWD
          valueFrom:
            secretKeyRef:
              name: "pgbouncer-temporal-pg-secret-qs" # Name of the secret containing PgBouncer credentials
              key:  password
      livenessProbe:
        initialDelaySeconds: 3
        timeoutSeconds: 3
        httpGet:
          path: /
          port: metrics
      readinessProbe:
        initialDelaySeconds: 5
        timeoutSeconds: 10
        httpGet:
          path: /
          port: metrics
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    labels: {}
    annotations: {}
    honorLabels: false
    metricRelabelings: []
    relabelings: []